package com.scytl.multi;

import org.apache.openejb.core.LocalInitialContextFactory;
import org.junit.BeforeClass;
import org.junit.Test;

import javax.ejb.embeddable.EJBContainer;
import javax.naming.Context;
import javax.sql.DataSource;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

import static org.junit.Assert.assertEquals;

/**
 * If you are using openejb.xml the test properties are:
 * <p/>
 * <p/>
 * <!-- Router and datasource -->
 * <Resource id="My Router" type="org.apache.openejb.router.test.DynamicDataSourceTest$DeterminedRouter" provider="org.routertest:DeterminedRouter">
 * DatasourceNames = database1 database2 database3
 * DefaultDataSourceName = database1
 * </Resource>
 * <Resource id="Routed Datasource" type="org.apache.openejb.resource.jdbc.Router" provider="org.router:RoutedDataSource">
 * Router = My Router
 * </Resource>
 * <p/>
 * <!-- real datasources -->
 * <Resource id="database1" type="DataSource">
 * JdbcDriver = org.hsqldb.jdbcDriver
 * JdbcUrl = jdbc:hsqldb:mem:db1
 * UserName = sa
 * Password
 * JtaManaged = true
 * </Resource>
 * <Resource id="database2" type="DataSource">
 * JdbcDriver = org.hsqldb.jdbcDriver
 * JdbcUrl = jdbc:hsqldb:mem:db2
 * UserName = sa
 * Password
 * JtaManaged = true
 * </Resource>
 * <Resource id="database3" type="DataSource">
 * JdbcDriver = org.hsqldb.jdbcDriver
 * JdbcUrl = jdbc:hsqldb:mem:db3
 * UserName = sa
 * Password
 * JtaManaged = true
 * </Resource>
 */
public class DynamicDataSourceTest {

    //create table Person (id bigint generated by default as identity (start with 1), name varchar(255), primary key (id))
    @BeforeClass
    public static void addDatabaseUserWithPassword() throws Exception {
        Class.forName("org.hsqldb.jdbcDriver");
        for (int i = 1; i <= 3; i++) {
            Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:db" + i, "sa", "");
            conn.setAutoCommit(true);
            Statement st = conn.createStatement();
            st.executeUpdate("create table Person (id bigint generated by default as identity (start with 1), name varchar(255), primary key (id));");
            st.close();
            conn.commit();
            conn.close();
        }
    }

    @Test
    public void route() throws Exception {
        String[] databases = new String[]{"database1", "database2", "database3"};

        Properties properties = new Properties();
        properties.setProperty(Context.INITIAL_CONTEXT_FACTORY, LocalInitialContextFactory.class.getName());

        System.out.println(DeterminedRouter.class.getName());
        // router
        properties.setProperty("My Router", "new://Resource?provider=org.router:DeterminedRouter&type=" + DeterminedRouter.class.getName());
        properties.setProperty("My Router.Tenants", "database1 database2 database3");

        // routed datasource
        properties.setProperty("Routed Datasource", "new://Resource?provider=RoutedDataSource&type=" + DataSource.class.getName());
        properties.setProperty("Routed Datasource.Router", "My Router");

        Context ctx = EJBContainer.createEJBContainer(/*properties*/).getContext();
        RoutedPersister ejb = (RoutedPersister) ctx.lookup("java:global/multi/RoutedPersister");
        for (int i = 0; i < 18; i++) {
            // persisting a person on database db -> kind of manual round robin
            String name = "record " + i;
            String db = databases[i % 3];
            ejb.persist(i, name, db);
        }

        // assert database records number using jdbc
        for (int i = 1; i <= databases.length; i++) {
            Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:db" + i, "sa", "");
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery("select count(*) from PERSON");
            rs.next();
            assertEquals(6, rs.getInt(1));
            st.close();
            connection.close();
        }

        ctx.close();
    }
}
